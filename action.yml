name: "Astro Deploy"
description: "A composite action that deploys your Astro site to GitHub Pages"
branding:
  icon: "box"
  color: "purple"
inputs:
  node-version:
    description: "The node version to use"
    required: false
    default: "18"
  package-manager:
    description: "You may specify your preferred package manager (one of `npm | yarn | pnpm | bun` and an optional `@<version>` tag). Otherwise, the package manager will be automatically detected."
    required: false
    default: ""
  path:
    description: "Path of the directory containing your site"
    required: false
    default: "."
outputs:
  url:
    description: "The URL of the deployed Pages site"
    value: ${{ steps.deploy.output.page_url }}

runs:
  using: composite
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check tools
      shell: "bash"
      working-directory: ${{ inputs.path }}
      env:
        INPUT_PM: ${{ inputs.package-manager }}
      run: |
        # Set $PACKAGE_MANAGER based on input or detected lockfile
        len=$(echo $INPUT_PM | wc -c)
        if [ $len -gt 1 ]; then
          PACKAGE_MANAGER=$(echo "$INPUT_PM" | grep -o '^[^@]*')
          VERSION=$(echo "$INPUT_PM" | grep -o '@.*' | sed 's/^@//')
        elif [ $(find "." -name "pnpm-lock.yaml") ]; then
          PACKAGE_MANAGER=pnpm
        elif [ $(find "." -name "yarn.lock") ]; then
          PACKAGE_MANAGER=yarn
        elif [ $(find "." -name "package-lock.json") ]; then
          PACKAGE_MANAGER=npm
        elif [ $(find "." -name "bun.lockb") ]; then
          PACKAGE_MANAGER=bun
        else
          echo "No lockfile found.
        Please specify your preferred \"package-manager\" in the action configuration."
          exit 1
        fi

        # If no $VERSION has been provided, default to latest
        if [ -z "$VERSION" ]; then
          VERSION="latest"
        fi

        case $PACKAGE_MANAGER in
        npm)
          COMMAND=ci
          RUNNER="npx --no-install"
          LOCKFILE=package-lock.json
          ;;
        pnpm)
          COMMAND=install
          RUNNER="pnpm exec"
          LOCKFILE=pnpm-lock.yaml
          ;;
        yarn)
          COMMAND=install
          RUNNER=yarn
          LOCKFILE=yarn.lock
          ;;
        bun)
          COMMAND="install --frozen-lockfile"
          RUNNER="bun run --bun"
          LOCKFILE=bun.lockb
          ;;
        esac

        echo "PACKAGE_MANAGER=$PACKAGE_MANAGER
        VERSION=$VERSION
        COMMAND=$COMMAND
        RUNNER=$RUNNER
        LOCKFILE=$LOCKFILE" >>$GITHUB_ENV

    - name: Setup PNPM
      if: ${{ env.PACKAGE_MANAGER == 'pnpm' }}
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.VERSION }}
    
    - name: Setup Bun
      if: ${{ env.PACKAGE_MANAGER == 'bun' }}
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.VERSION }}

    - name: Setup Node
      uses: actions/setup-node@v4
      if: ${{ env.PACKAGE_MANAGER != 'bun' }}
      with:
        node-version: ${{ inputs.node-version }}
        cache: ${{ env.PACKAGE_MANAGER }}
        cache-dependency-path: "${{ inputs.path }}/${{ env.LOCKFILE }}"
    
    - name: Setup Node (Bun)
      uses: actions/setup-node@v4
      if: ${{ env.PACKAGE_MANAGER == 'bun' }}
      with:
        node-version: ${{ inputs.node-version }}

    - name: Setup Pages
      id: pages
      uses: actions/configure-pages@v3

    - name: Install
      shell: "bash"
      working-directory: ${{ inputs.path }}
      run: $PACKAGE_MANAGER $COMMAND

    - name: Build
      shell: "bash"
      working-directory: ${{ inputs.path }}
      run: $RUNNER astro build \
          --site "${{ steps.pages.outputs.origin }}" \
          --base "${{ steps.pages.outputs.base_path }}"

    - name: Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: "${{ inputs.path }}/dist/"

    - name: Deploy to GitHub Pages
      id: deploy
      uses: actions/deploy-pages@v4
